// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compile with npm:delay 1`] = `
"const createAbortError = () => {
  const error = new Error('Delay aborted');
  error.name = 'AbortError';
  return error;
};

const createDelay = ({
  clearTimeout: defaultClear,
  setTimeout: set,
  willResolve
}) => (ms, {
  value,
  signal
} = {}) => {
  if (signal && signal.aborted) {
    return Promise.reject(createAbortError());
  }

  let timeoutId;
  let settle;
  let rejectFn;
  const clear = defaultClear || clearTimeout;

  const signalListener = () => {
    clear(timeoutId);
    rejectFn(createAbortError());
  };

  const cleanup = () => {
    if (signal) {
      signal.removeEventListener('abort', signalListener);
    }
  };

  const delayPromise = new Promise((resolve, reject) => {
    settle = () => {
      cleanup();

      if (willResolve) {
        resolve(value);
      } else {
        reject(value);
      }
    };

    rejectFn = reject;
    timeoutId = (set || setTimeout)(settle, ms);
  });

  if (signal) {
    signal.addEventListener('abort', signalListener, {
      once: true
    });
  }

  delayPromise.clear = () => {
    clear(timeoutId);
    timeoutId = null;
    cleanup();
    settle();
  };

  return delayPromise;
};

const delay = createDelay({
  willResolve: true
});
delay.reject = createDelay({
  willResolve: false
});

delay.createWithTimers = ({
  clearTimeout,
  setTimeout
}) => {
  const delay = createDelay({
    clearTimeout,
    setTimeout,
    willResolve: true
  });
  delay.reject = createDelay({
    clearTimeout,
    setTimeout,
    willResolve: false
  });
  return delay;
};

var delay_4_3_0 = delay; // TODO: Remove this for the next major release

var default_1 = delay;
delay_4_3_0.default = default_1;

delay_4_3_0(3000);
"
`;

exports[`compile with npm:delay via cache 1`] = `
"const createAbortError = () => {
  const error = new Error('Delay aborted');
  error.name = 'AbortError';
  return error;
};

const createDelay = ({
  clearTimeout: defaultClear,
  setTimeout: set,
  willResolve
}) => (ms, {
  value,
  signal
} = {}) => {
  if (signal && signal.aborted) {
    return Promise.reject(createAbortError());
  }

  let timeoutId;
  let settle;
  let rejectFn;
  const clear = defaultClear || clearTimeout;

  const signalListener = () => {
    clear(timeoutId);
    rejectFn(createAbortError());
  };

  const cleanup = () => {
    if (signal) {
      signal.removeEventListener('abort', signalListener);
    }
  };

  const delayPromise = new Promise((resolve, reject) => {
    settle = () => {
      cleanup();

      if (willResolve) {
        resolve(value);
      } else {
        reject(value);
      }
    };

    rejectFn = reject;
    timeoutId = (set || setTimeout)(settle, ms);
  });

  if (signal) {
    signal.addEventListener('abort', signalListener, {
      once: true
    });
  }

  delayPromise.clear = () => {
    clear(timeoutId);
    timeoutId = null;
    cleanup();
    settle();
  };

  return delayPromise;
};

const delay = createDelay({
  willResolve: true
});
delay.reject = createDelay({
  willResolve: false
});

delay.createWithTimers = ({
  clearTimeout,
  setTimeout
}) => {
  const delay = createDelay({
    clearTimeout,
    setTimeout,
    willResolve: true
  });
  delay.reject = createDelay({
    clearTimeout,
    setTimeout,
    willResolve: false
  });
  return delay;
};

var delay_4_3_0 = delay; // TODO: Remove this for the next major release

var default_1 = delay;
delay_4_3_0.default = default_1;

delay_4_3_0(3000);
"
`;

exports[`compile with preact 1`] = `
"Object.defineProperty(exports, \\"__esModule\\", { value: true });
var preact_1 = require(\\"preact\\");
var hooks_1 = require(\\"preact/hooks\\");
function App() {
    hooks_1.useEffect(function () { return console.log(\\"mounted\\"); }, []);
    return preact_1.h(\\"div\\", null, \\"App\\");
}
exports.default = preact_1.h(App, null);
"
`;

exports[`compile with react 1`] = `
"Object.defineProperty(exports, \\"__esModule\\", { value: true });
var react_1 = require(\\"react\\");
function App() {
    return react_1.default.createElement(\\"div\\", null, \\"App\\");
}
exports.default = react_1.default.createElement(App, null);
"
`;
